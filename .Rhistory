library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flags_colors <- flags[,11:17]
flags_colors <- flags[, 11:17]
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
letters
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replacement = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIX(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() = t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(cars$dist, cars$speed)
plot(x = cars$speed, y = cars$dist, "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping
| Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
Type plot(cars, sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2
plot(cars, pch = 2)
plot(cars, pch = 2)
data(mtcars)
?boxplot
boxplot(mpg ~ cyl)
boxplot(formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
rm.ls
rm.ls()
mean(z)
traceback()
lm(y ~ x)
oh dear
traceback()
data("iris")
?iris
head(iris)
mean(iris$Sepal.Length)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
data(mtcars)
?mtcars
summary(mtcars)
head(mtcars)
str(mtcars)
debus(ls)
debug(ls)
ls()
exit
undebug(ls)
install.packages("ggplot2")
x <- 2:5
p <- (1:4)/10
sum(p)
rbind(x,p)
sum(x^2 * p) - sum(x*p)^2
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X", "Prob")
temp
mean(temp)
sum(x^2*p)
sum(x*p)^2
sum(p)
sum(x*p)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x,y)
z <- rnorm(100)
plot(x,z)
plot(x,y)
par(mar = c(2,2,2))
par(mar = c(2,2,2,2))
plot(x,y)
par(mar = c(4,4,2,2))
plot(x,y)
plot(x,y,pch= 20)
plot(x,y,pch= 19)
plot(x,y,pch= 2)
plot(x,y,pch= 3)
example(points)
library(swirl)
install.packages("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = F)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran,r_arch:country)
select(cran,country:r_arch)
cran
select(cran, -time)
select(-X:size)
select(cran, -X:size)
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version == "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/ 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cra, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
by_package <- groupby(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit(0)
submit()
submit()
submit()
?mutate
reset()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separage(res,sex_class, into = c("sex", "class"))
separate(res,sex_class, into = c("sex", "class"))
submit()
students3
submit()
?spread
submit()
submit()
submit()
reset()
submit()
submit()
submit()
reset()
submit()
submit()
submit()
extract_numeric("class5")
submit()
?extract_numeric
submit()
submit()
?mutate
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(status = "passed")
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?separate
submit()
submit()
?select
submit()
submit()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = "lubridate")
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 5, minute = 22)
this_moment <- update(this_moment, hours = 5, minutes = 22)
this_moment
nyc <- now("America/New_York")
nyc
nyc + days(2)
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- withtz(arrive, tzone = "Asia/Hong_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
mdy("June 17, 2008", tz = "Singapore")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?new_interval
how_long <- new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
64/100
mypdf
integrage(mypdf, 0, 1.6)
integrate(mypdf, 0, 1.6)
.5
.25
4
sqrt(2)
.997*.001
(1-.985)*(1-.001)
0.000997/(0.000997+0.014985)
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh + edl)
integrage(myfunc, 0, 2)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
dice_sqr
ex2_fair <- dice_sqr*dice_fair
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair -3.5^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
pnorm(93, 100, 10)
.05*.93/(.05*.93+(1-.05)*(1-.88))
.05*.93/(.05*.93+(1-.05)*.88)
qnorm(.95,100,2)
choose(6,5)*.5^6 + choose(6,6)*5^6
pbinom(4,size = 6, prob = 0.5, lower.tail = FALSE)
pnorm(.51, .5, (1/12)^2/100)
1+4+9+16+25+36
/6
91/6
91/6 - 3.5^2
ppois(20,lambda = 16.5*2)
ppois(20,lambda = 16.5*2)*100
ppois(10,lambda = 15)
1/12
pnorm(70,80,10)
qnorm(.95,1100,75)
qnorm(.95,1100,75^2/100)
qnorm(.95,1100,75/sqrt(100))
.5^5*(choose(5,4)+choose(5,5))
pnorm(16,15,10/sqrt(100)) - pnorm(14, 15, 10/sqrt(100))
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
source('~/datasciencecoursera/RepData_PeerAssessment1/working.R')
head(dataImputed)
perDayImp <- tapply(dataImputed$steps, dataImputed$date, sum, na.rm = TRUE)
hist(perDayImp, col = 'blue', breaks = 10, main = "Steps Taken Plot", xlab = "Steps per Day")
hist(perDayImp, col = 'blue', breaks = 10, main = "Steps Taken Imputed Values", xlab = "Steps per Day")
perDayMeanImp <- mean(perdayImp)
perDayMeanImp <- mean(perDayImp)
perDayImp
perDayMeanImp
perDayMedianImp <- median(perDayImp)
dataImputed$dateType <-  ifelse(as.POSIXlt(dataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
head(dataImputed)
avgImp <- aggregate(steps ~ interval + dateType, data=dataImputed, mean)
plot(steps, avgImp, type = 'l')
head(avgImp)
plot(avgImp$interval, avgImp$steps)
plot(avgImp$interval, avgImp$steps, type = 'l')
par = mfrow(c(1,2))
par = nrow(c(1,2))
with(avgImp[avgImp$dateType == "weekday"], plot(avgImp$interval, avgImp$steps, type='l'))
with(avgImp[avgImp$dateType == "weekday",], plot(avgImp$interval, avgImp$steps, type='l'))
par(mfrow(c(1,2)))
par(mfrow=c(1,2))
with(avgImp[avgImp$dateType == "weekday",], plot(avgImp$interval, avgImp$steps, type='l'))
with(avgImp[avgImp$dateType == "weekend",], plot(avgImp$interval, avgImp$steps, type='l'))
dataImputed$dateType <-  ifelse(as.POSIXlt(dataImputed$date)$wday %in% c(0,6), 'weekend', 'weekday')
weekday <- dataImputed[dataImputed$dateType == "weekday"]
weekday <- dataImputed[dataImputed$dateType == "weekday",]
head(weekday)
weekend <- dataImputed[dataImputed$dateType == "weekend",]
perWeekday <- tapply(weekday$steps, weekday$date, sum, na.rm = TRUE)
perWeekend <- tapply(weekend$steps, weekend$date, sum, na.rm = TRUE)
perWeekday <- aggregate(x=list(meanSteps=weekday$steps), by=list(interval=weekday$interval), FUN=mean)
perWeekend <- aggregate(x=list(meanSteps=weekend$steps), by=list(interval=weekend$interval), FUN=mean)
plot(perWeekday$interval, perWeekday$meanSteps)
plot(perWeekday$interval, perWeekday$meanSteps, type='l')
plot(perWeekday$interval, perWeekday$meanSteps, type='l')
plot(perWeekend$interval, perWeekend$meanSteps, type='l')
perDayMean - perDayMeanImp
perDayMedian - perDayMedianImp
